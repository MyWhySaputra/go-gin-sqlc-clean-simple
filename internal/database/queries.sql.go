// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (user_id, name, bio)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, bio
`

type CreateProfileParams struct {
	UserID sql.NullInt64
	Name   string
	Bio    string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.UserID, arg.Name, arg.Bio)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password)
VALUES ($1, $2)
RETURNING id, email, password
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const deleteProfileByUserId = `-- name: DeleteProfileByUserId :exec
DELETE
FROM profile
WHERE user_id = $1
`

func (q *Queries) DeleteProfileByUserId(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteProfileByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getProfileByUserId = `-- name: GetProfileByUserId :one
SELECT id, user_id, name, bio
FROM profile
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetProfileByUserId(ctx context.Context, userID sql.NullInt64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserId, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, user_id, name, bio
FROM profile
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, email, password
FROM users
ORDER BY id
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const partialUpdateProfileByUserId = `-- name: PartialUpdateProfileByUserId :one
UPDATE profile
SET name = CASE WHEN $1::boolean THEN $2::VARCHAR(255) ELSE name END,
    bio = CASE WHEN $3::boolean THEN $4::TEXT ELSE bio END
WHERE user_id = $5
RETURNING id, user_id, name, bio
`

type PartialUpdateProfileByUserIdParams struct {
	UpdateName bool
	Name       string
	UpdateBio  bool
	Bio        string
	UserID     sql.NullInt64
}

func (q *Queries) PartialUpdateProfileByUserId(ctx context.Context, arg PartialUpdateProfileByUserIdParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, partialUpdateProfileByUserId,
		arg.UpdateName,
		arg.Name,
		arg.UpdateBio,
		arg.Bio,
		arg.UserID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const partialUpdateUser = `-- name: PartialUpdateUser :one
UPDATE users
SET email = CASE WHEN $1::boolean THEN $2::VARCHAR(255) ELSE email END,
    password  = CASE WHEN $3::boolean THEN $4::VARCHAR(255) ELSE password END
WHERE id = $5
RETURNING id, email, password
`

type PartialUpdateUserParams struct {
	UpdateEmail    bool
	Email          string
	UpdatePassword bool
	Password       string
	ID             int64
}

func (q *Queries) PartialUpdateUser(ctx context.Context, arg PartialUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, partialUpdateUser,
		arg.UpdateEmail,
		arg.Email,
		arg.UpdatePassword,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const updateProfileByUserId = `-- name: UpdateProfileByUserId :one
UPDATE profile
SET name = $2,
    bio = $3
WHERE user_id = $1
RETURNING id, user_id, name, bio
`

type UpdateProfileByUserIdParams struct {
	UserID sql.NullInt64
	Name   string
	Bio    string
}

func (q *Queries) UpdateProfileByUserId(ctx context.Context, arg UpdateProfileByUserIdParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileByUserId, arg.UserID, arg.Name, arg.Bio)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    password  = $3
WHERE id = $1
RETURNING id, email, password
`

type UpdateUserParams struct {
	ID       int64
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}
